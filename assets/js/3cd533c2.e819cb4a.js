"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[7096],{5788:(e,a,n)=>{n.d(a,{Iu:()=>d,yg:()=>g});var t=n(1504);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=t.createContext({}),s=function(e){var a=t.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=s(e.components);return t.createElement(c.Provider,{value:a},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(n),u=i,g=p["".concat(c,".").concat(u)]||p[u]||y[u]||r;return n?t.createElement(g,l(l({ref:a},d),{},{components:n})):t.createElement(g,l({ref:a},d))}));function g(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},104:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>y,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var t=n(5072),i=(n(1504),n(5788));const r={title:"Joystick Card",sidebar_label:"Joystick (Pro)",sidebar_position:7},l=void 0,o={unversionedId:"cards/joystick",id:"version-v4.x.x/cards/joystick",title:"Joystick Card",description:"This feature is available in DASH Pro only.",source:"@site/versioned_docs/version-v4.x.x/cards/joystick.md",sourceDirName:"cards",slug:"/cards/joystick",permalink:"/cards/joystick",draft:!1,tags:[],version:"v4.x.x",sidebarPosition:7,frontMatter:{title:"Joystick Card",sidebar_label:"Joystick (Pro)",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Text Input (Pro)",permalink:"/cards/text-input"},next:{title:"Dropdown (Pro)",permalink:"/cards/dropdown"}},c={},s=[{value:"Preview:",id:"preview",level:4},{value:"Type:",id:"type",level:4},{value:"Initializer:",id:"initializer",level:4},{value:"Direction Lock:",id:"direction-lock",level:4},{value:"Callback:",id:"callback",level:4},{value:"Directional Callback:",id:"directional-callback",level:5},{value:"Coordinates Callback:",id:"coordinates-callback",level:5}],d={toc:s},p="wrapper";function y(e){let{components:a,...n}=e;return(0,i.yg)(p,(0,t.c)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("div",{className:"pro-label"},(0,i.yg)("i",null,(0,i.yg)("h4",{style:{fontWeight:"500",marginBottom:5}},"This feature is available in ",(0,i.yg)("a",{target:"_blank",style:{color:"red"},href:"https://espdash.pro"},"DASH Pro")," only."))),(0,i.yg)("h4",{id:"preview"},"Preview:"),(0,i.yg)("img",{className:"card-preview",src:"/img/v4/joystick-card.png",width:"280px",alt:"Preview"}),(0,i.yg)("br",null),(0,i.yg)("br",null),(0,i.yg)("p",null,"This card adds a joystick to your dashboard to control some stuff and provides you with easy to interpret directional data via callback. You can even lock direction of the joystick to X or Y axis."),(0,i.yg)("br",null),(0,i.yg)("h4",{id:"type"},"Type:"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"JOYSTICK_CARD")),(0,i.yg)("br",null),(0,i.yg)("h4",{id:"initializer"},"Initializer:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Joystick Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name, const char* directionLock (optional) )\n*/\nCard joystick(&dashboard, JOYSTICK_CARD, "Joystick 1");\n')),(0,i.yg)("br",null),(0,i.yg)("h4",{id:"direction-lock"},"Direction Lock:"),(0,i.yg)("p",null,"You can lock joystick to X or Y Axis:"),(0,i.yg)("p",null,"Supply it with ",(0,i.yg)("inlineCode",{parentName:"p"},"lockX")," as 4th argument and it will lock to X axis."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'Card joystick(&dashboard, JOYSTICK_CARD, "Joystick 1", "lockX");\n')),(0,i.yg)("br",null),(0,i.yg)("p",null,"Supply it with ",(0,i.yg)("inlineCode",{parentName:"p"},"lockY")," as 4th argument and it will lock to Y axis."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'Card joystick(&dashboard, JOYSTICK_CARD, "Joystick 1", "lockY");\n')),(0,i.yg)("p",null,"By default, joystick works on both axis."),(0,i.yg)("h4",{id:"callback"},"Callback:"),(0,i.yg)("p",null,"Joystick Card requires a callback function which will be called when we receive a input from our dashboard. In setup block, we will be calling our ",(0,i.yg)("inlineCode",{parentName:"p"},"attachCallback")," function and provide a lambda (callback) function with a ",(0,i.yg)("inlineCode",{parentName:"p"},"const char*")," (character array) argument."),(0,i.yg)("p",null,"Joystick card has 2 callbacks, ",(0,i.yg)("inlineCode",{parentName:"p"},"directional")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"coordinates"),":"),(0,i.yg)("h5",{id:"directional-callback"},"Directional Callback:"),(0,i.yg)("p",null,"This callback will return the active direction of your joystick when it's moved. It will be one of the following:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"up")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"down")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"left")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"right")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"idle"))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"/*\n  We provide our attachCallback with a lambda function to handle incomming data\n  `value` is the direction of joystick 'up', 'down', 'left', 'right' or 'idle'\n*/\njoystick.attachCallback([&](const char* direction){\n  Serial.println(\"[Joystick] Current Direction: \"+String(direction));\n});\n")),(0,i.yg)("h5",{id:"coordinates-callback"},"Coordinates Callback:"),(0,i.yg)("p",null,"This callback will return the active coordinates of the thumb of your joystick when it's moved. It will provide x and y coordinates which ranges from ",(0,i.yg)("inlineCode",{parentName:"p"},"-60")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"60")," on each axis."),(0,i.yg)("p",null,"In case of X axis: ",(0,i.yg)("inlineCode",{parentName:"p"},"-60")," is left, ",(0,i.yg)("inlineCode",{parentName:"p"},"60")," is right.\nFor Y axis: ",(0,i.yg)("inlineCode",{parentName:"p"},"-60")," is up, and ",(0,i.yg)("inlineCode",{parentName:"p"},"60")," is bottom."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  We provide our attachCallback with a lambda function to handle incomming data.\n  In this case, we will be getting x and y axis coordinates in range of -60 to 60\n*/\njoystick.attachCallback([&](int8_t x, int8_t y){\n  Serial.printf("[Joystick] X Axis: %d, Y Axis: %d\\n", x, y);\n});\n')),(0,i.yg)("br",null),(0,i.yg)("br",null))}y.isMDXComponent=!0}}]);