"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[2800],{5788:(e,r,a)=>{a.d(r,{Iu:()=>p,yg:()=>g});var n=a(1504);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function l(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?l(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function o(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var d=n.createContext({}),c=function(e){var r=n.useContext(d),a=r;return e&&(a="function"==typeof e?e(r):i(i({},r),e)),a},p=function(e){var r=c(e.components);return n.createElement(d.Provider,{value:r},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=c(a),y=t,g=s["".concat(d,".").concat(y)]||s[y]||u[y]||l;return a?n.createElement(g,i(i({ref:r},p),{},{components:a})):n.createElement(g,i({ref:r},p))}));function g(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=a.length,i=new Array(l);i[0]=y;var o={};for(var d in r)hasOwnProperty.call(r,d)&&(o[d]=r[d]);o.originalType=e,o[s]="string"==typeof e?e:t,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},8676:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(5072),t=(a(1504),a(5788));const l={title:"Slider Card",sidebar_label:"Slider",sidebar_position:6},i=void 0,o={unversionedId:"cards/slider",id:"version-v4.x.x/cards/slider",title:"Slider Card",description:"Preview:",source:"@site/versioned_docs/version-v4.x.x/cards/slider.md",sourceDirName:"cards",slug:"/cards/slider",permalink:"/cards/slider",draft:!1,tags:[],version:"v4.x.x",sidebarPosition:6,frontMatter:{title:"Slider Card",sidebar_label:"Slider",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Status",permalink:"/cards/status"},next:{title:"Text Input (Pro)",permalink:"/cards/text-input"}},d={},c=[{value:"Preview:",id:"preview",level:4},{value:"Type:",id:"type",level:4},{value:"Valid Data Types:",id:"valid-data-types",level:4},{value:"Initializer:",id:"initializer",level:4},{value:"Callback:",id:"callback",level:4},{value:"Updaters:",id:"updaters",level:4}],p={toc:c},s="wrapper";function u(e){let{components:r,...a}=e;return(0,t.yg)(s,(0,n.c)({},p,a,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h4",{id:"preview"},"Preview:"),(0,t.yg)("img",{className:"card-preview",src:"/img/v4/slider-card.png",width:"380px",alt:"Preview"}),(0,t.yg)("br",null),(0,t.yg)("br",null),(0,t.yg)("p",null,"This card adds a interactive horizontal slider to your dashboard. Slider card is useful when you require a integer input within a certain range. ( Example use case: LED brightness control )"),(0,t.yg)("br",null),(0,t.yg)("h4",{id:"type"},"Type:"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"SLIDER_CARD")),(0,t.yg)("br",null),(0,t.yg)("h4",{id:"valid-data-types"},"Valid Data Types:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"int"))),(0,t.yg)("br",null),(0,t.yg)("h4",{id:"initializer"},"Initializer:"),(0,t.yg)("p",null,"With slider card, Initializer requires ",(0,t.yg)("inlineCode",{parentName:"p"},"min")," & ",(0,t.yg)("inlineCode",{parentName:"p"},"max")," range."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Slider Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name, const char* symbol (optional), int min, int max)\n*/\nCard card1(&dashboard, SLIDER_CARD, "Test Slider", "", 0, 255);\n')),(0,t.yg)("br",null),(0,t.yg)("h4",{id:"callback"},"Callback:"),(0,t.yg)("p",null,"Slider Card requires a callback function which will be called when we receive a input from our dashboard. We will be calling our ",(0,t.yg)("inlineCode",{parentName:"p"},"attachCallback")," function and provide a lambda function with a ",(0,t.yg)("inlineCode",{parentName:"p"},"int")," argument."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Note:")," You need to call the ",(0,t.yg)("inlineCode",{parentName:"p"},"update")," function and ",(0,t.yg)("inlineCode",{parentName:"p"},"sendUpdates")," immediately once you receive the value in callback. Otherwise user input will not be registered on dashboard."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  We provide our attachCallback with a lambda function to handle incomming data\n  `value` is the boolean sent from your dashboard\n*/\ncard1.attachCallback([&](int value){\n  Serial.println("[Card1] Slider Callback Triggered: "+String(value));\n  card1.update(value);\n  dashboard.sendUpdates();\n});\n')),(0,t.yg)("br",null),(0,t.yg)("h4",{id:"updaters"},"Updaters:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(int value);\n")),(0,t.yg)("p",null,"Or, update symbol along your value:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'card1.update(244, "%");\n')))}u.isMDXComponent=!0}}]);