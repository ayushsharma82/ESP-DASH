"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[319],{5680:(e,t,a)=>{a.d(t,{xA:()=>d,yg:()=>y});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(a),g=r,y=u["".concat(c,".").concat(g)]||u[g]||s[g]||i;return a?n.createElement(y,l(l({ref:t},d),{},{components:a})):n.createElement(y,l({ref:t},d))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},2408:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(8168),r=(a(6540),a(5680));const i={title:"Text Input Card",sidebar_label:"Text Input (Pro)",sidebar_position:11},l=void 0,o={unversionedId:"cards/text-input",id:"version-v4.x.x/cards/text-input",title:"Text Input Card",description:"This is an exclusive feature of DASH Pro. Check it out here.",source:"@site/versioned_docs/version-v4.x.x/cards/text-input.md",sourceDirName:"cards",slug:"/cards/text-input",permalink:"/cards/text-input",draft:!1,tags:[],version:"v4.x.x",sidebarPosition:11,frontMatter:{title:"Text Input Card",sidebar_label:"Text Input (Pro)",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Image (Pro)",permalink:"/cards/image"},next:{title:"Password (Pro)",permalink:"/cards/password"}},c={},p=[{value:"Initializer",id:"initializer",level:3},{value:"Callback",id:"callback",level:3},{value:"Updater",id:"updater",level:3},{value:"Reference",id:"reference",level:3}],d={toc:p},u="wrapper";function s(e){let{components:t,...a}=e;return(0,r.yg)(u,(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("admonition",{title:"Pro Feature",type:"danger"},(0,r.yg)("p",{parentName:"admonition"},"This is an exclusive feature of DASH Pro. Check it out ",(0,r.yg)("a",{parentName:"p",href:"https://espdash.pro"},"here"),".")),(0,r.yg)("img",{className:"card-preview",src:"/img/v4/text-input-card.png",width:"280px",alt:"Text Input Card Preview"}),(0,r.yg)("br",null),(0,r.yg)("br",null),(0,r.yg)("p",null,"Text Input Card gives you the ability to take String input from user and save them in your application. It provides you with a input box on the dashboard where user can send back text to your application. "),(0,r.yg)("p",null,"This card is very useful for saving WiFi credentials, user ID and general information."),(0,r.yg)("h3",{id:"initializer"},"Initializer"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Text Input Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name)\n*/\nCard card1(&dashboard, TEXT_INPUT_CARD, "User Email");\n')),(0,r.yg)("h3",{id:"callback"},"Callback"),(0,r.yg)("p",null,"Text Input Card requires a callback function which will be called when we receive a input from our dashboard. In setup block, we will be calling our ",(0,r.yg)("inlineCode",{parentName:"p"},"attachCallback")," function and provide a lambda (callback) function with a ",(0,r.yg)("inlineCode",{parentName:"p"},"const char*")," (character array) argument."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note:")," You need to call the ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," function and ",(0,r.yg)("inlineCode",{parentName:"p"},"sendUpdates")," immediately once you receive the value in callback. Otherwise user input will not be registered on dashboard and it will keep the card stuck in 'waiting' phase."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  We provide our attachCallback with a lambda function to handle incomming data\n*/\ncard1.attachCallback([&](const char* value){\n  Serial.println("[Card1] Text Input Callback Triggered: "+String(value));\n  card1.update(value);\n  dashboard.sendUpdates();\n});\n')),(0,r.yg)("h3",{id:"updater"},"Updater"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(const char* value);\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(String value);\n")),(0,r.yg)("h3",{id:"reference"},"Reference"),(0,r.yg)("p",null,"This is a reference sketch showing positions for intializer, callback and updater."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'\n...\n\n/* Week selector card initializer */\nCard text(&dashboard, TEXT_INPUT_CARD, "Test Email");\n\n\nvoid setup() {\n  ...\n\n  /* Week selector card callback */\n  text.attachCallback([&](const char* value){\n    Serial.println("Text Input Callback Triggered: "+String(value));\n    /* Week selector card updater - you need to update the button with latest value upon firing of callback */\n    text.update(value);\n    /* Send update to dashboard */\n    dashboard.sendUpdates();\n  });\n}\n\nvoid loop() {\n  ...\n}\n\n')))}s.isMDXComponent=!0}}]);