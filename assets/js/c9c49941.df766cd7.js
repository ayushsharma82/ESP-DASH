"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[273],{5680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>g});var a=t(6540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),p=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=p(e.components);return a.createElement(l.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},y=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),y=n,g=u["".concat(l,".").concat(y)]||u[y]||d[y]||i;return t?a.createElement(g,o(o({ref:r},c),{},{components:t})):a.createElement(g,o({ref:r},c))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=y;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[u]="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3342:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(8168),n=(t(6540),t(5680));const i={title:"Pie Chart",sidebar_label:"Pie (Pro)",sidebar_position:4},o=void 0,s={unversionedId:"widgets/charts/pie",id:"widgets/charts/pie",title:"Pie Chart",description:"This is an exclusive feature of DASH Pro. Check it out here.",source:"@site/docs/widgets/charts/pie.md",sourceDirName:"widgets/charts",slug:"/widgets/charts/pie",permalink:"/next/widgets/charts/pie",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Pie Chart",sidebar_label:"Pie (Pro)",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Area (Pro)",permalink:"/next/widgets/charts/area"},next:{title:"Statistics",permalink:"/next/widgets/custom-statistics"}},l={},p=[{value:"Initializer",id:"initializer",level:3},{value:"Updater",id:"updater",level:3},{value:"For X-Axis",id:"for-x-axis",level:4},{value:"X-Axis Data Types",id:"x-axis-data-types",level:5},{value:"For Y-Axis",id:"for-y-axis",level:4},{value:"Y-Axis Data Types",id:"y-axis-data-types",level:4},{value:"Reference",id:"reference",level:3}],c={toc:p},u="wrapper";function d(e){let{components:r,...t}=e;return(0,n.yg)(u,(0,a.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("admonition",{title:"Pro Feature",type:"danger"},(0,n.yg)("p",{parentName:"admonition"},"This is an exclusive feature of DASH Pro. Check it out ",(0,n.yg)("a",{parentName:"p",href:"https://espdash.pro"},"here"),".")),(0,n.yg)("img",{className:"card-preview",src:"/img/v4/pie-chart.png",width:"380px",alt:"Preview"}),(0,n.yg)("br",null),(0,n.yg)("br",null),(0,n.yg)("h3",{id:"initializer"},"Initializer"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Pie Chart\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name )\n*/\nChart chart1(&dashboard, PIE_CHART, "Chart Name");\n')),(0,n.yg)("h3",{id:"updater"},"Updater"),(0,n.yg)("h4",{id:"for-x-axis"},"For X-Axis"),(0,n.yg)("p",null,"X-Axis updater uses ",(0,n.yg)("inlineCode",{parentName:"p"},"updateX")," function."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  Data for X Axis of our Chart\n  This array can be of: `int` / `float` or `String`\n    \n  Note: this array should be kept in global scope. i.e. it should never be deleted from memory.\n*/\nString XAxis[] = {"Biscuits", "Cookies", "Milk", "Thing4", "Thing5"};\n\n/*\n  Update Function for Chart is as follows:\n  --------\n  (int array[], size_t array_size)\n  or\n  (float array[], size_t array_size)\n  or\n  (String array[], size_t array_size)\n  or\n  (const char* array[], size_t array_size)\n*/\nchart1.updateX(XAxis, 5);\n')),(0,n.yg)("h5",{id:"x-axis-data-types"},"X-Axis Data Types"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"int")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"float")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"String")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"const char*"))),(0,n.yg)("hr",null),(0,n.yg)("h4",{id:"for-y-axis"},"For Y-Axis"),(0,n.yg)("p",null,"Y-Axis updater uses ",(0,n.yg)("inlineCode",{parentName:"p"},"updateY")," function."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},"/*\n  Data for Y Axis of our Chart\n  This array can be of: `int` or `float`\n  \n  Note: this array should be kept in global scope. i.e. it should never be deleted from memory.\n*/\nint YAxis[] = {0, 0, 0, 0, 0};\n\n/*\n  Update Function for Chart is as follows:\n  --------\n  (int array[], size_t array_size)\n  or \n  (float array[], size_t array_size)\n*/\nchart1.updateY(YAxis, 5);\n")),(0,n.yg)("h4",{id:"y-axis-data-types"},"Y-Axis Data Types"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"int")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"float"))),(0,n.yg)("h3",{id:"reference"},"Reference"),(0,n.yg)("p",null,"This is a reference sketch showing positions for intializer and updater."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},'\n...\n\n/* Pie Chart initializer */\nChart pie(&dashboard, PIE_CHART, "Chart Name");\n\n/* XAxis & YAxis data in global scope */\nint YAxis[] = {0, 0, 0, 0, 0};\nString XAxis[] = {"Biscuits", "Cookies", "Milk", "Thing4", "Thing5"};\n\nvoid setup() {\n  ...\n\n  /* Pie Chart x-axis updater - can be used anywhere (apart from global scope) */\n  pie.updateX(XAxis, 5); // Ideally only once in setup block\n\n  /* Pie Chart y-axis updater - can be used anywhere (apart from global scope) */\n  pie.updateY(YAxis, 5);\n}\n\nvoid loop() {\n  ...\n}\n')))}d.isMDXComponent=!0}}]);