"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[5077],{5680:(e,a,n)=>{n.d(a,{xA:()=>p,yg:()=>g});var r=n(6540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var d=r.createContext({}),c=function(e){var a=r.useContext(d),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=c(e.components);return r.createElement(d.Provider,{value:a},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},h=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(n),h=t,g=s["".concat(d,".").concat(h)]||s[h]||u[h]||o;return n?r.createElement(g,i(i({ref:a},p),{},{components:n})):r.createElement(g,i({ref:a},p))}));function g(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var d in a)hasOwnProperty.call(a,d)&&(l[d]=a[d]);l.originalType=e,l[s]="string"==typeof e?e:t,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5019:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(8168),t=(n(6540),n(5680));const o={title:"Dropdown Card",sidebar_label:"Dropdown (Pro)",sidebar_position:13},i=void 0,l={unversionedId:"cards/dropdown",id:"version-v4.x.x/cards/dropdown",title:"Dropdown Card",description:"This is an exclusive feature of DASH Pro. Check it out here.",source:"@site/versioned_docs/version-v4.x.x/cards/dropdown.md",sourceDirName:"cards",slug:"/cards/dropdown",permalink:"/cards/dropdown",draft:!1,tags:[],version:"v4.x.x",sidebarPosition:13,frontMatter:{title:"Dropdown Card",sidebar_label:"Dropdown (Pro)",sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Password (Pro)",permalink:"/cards/password"},next:{title:"Push Button (Pro)",permalink:"/cards/push-button"}},d={},c=[{value:"Initializer",id:"initializer",level:3},{value:"Callback",id:"callback",level:3},{value:"Updater",id:"updater",level:3},{value:"Reference",id:"reference",level:3}],p={toc:c},s="wrapper";function u(e){let{components:a,...n}=e;return(0,t.yg)(s,(0,r.A)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("admonition",{title:"Pro Feature",type:"danger"},(0,t.yg)("p",{parentName:"admonition"},"This is an exclusive feature of DASH Pro. Check it out ",(0,t.yg)("a",{parentName:"p",href:"https://espdash.pro"},"here"),".")),(0,t.yg)("img",{className:"card-preview",src:"/img/v4/dropdown-card.png",width:"280px",alt:"Preview"}),(0,t.yg)("img",{className:"card-preview",src:"/img/v4/dropdown-card-2.png",width:"280px",alt:"Preview"}),(0,t.yg)("br",null),(0,t.yg)("br",null),(0,t.yg)("p",null,'This card adds a dropdown selectable list on your dashboard. You can pass "," comma separated list as it\'s secondary value with unlimited number of choices.'),(0,t.yg)("h3",{id:"initializer"},"Initializer"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Dropdown Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name, const char* choices )\n*/\nCard card1(&dashboard, DROPDOWN_CARD, "Test Dropdown", "Option1,Option2,Option3,Option4");\n')),(0,t.yg)("h3",{id:"callback"},"Callback"),(0,t.yg)("p",null,"The Dropdown Card requires a callback function that will be invoked when input is received from the dashboard. This function should utilize the ",(0,t.yg)("inlineCode",{parentName:"p"},"attachCallback")," method and provide a lambda function with a ",(0,t.yg)("inlineCode",{parentName:"p"},"const char*")," parameter."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Note:")," It's essential to immediately invoke the ",(0,t.yg)("inlineCode",{parentName:"p"},"update")," function and ",(0,t.yg)("inlineCode",{parentName:"p"},"sendUpdates")," after receiving a value in the callback. Failure to do so will result in the user's input not being registered on the dashboard."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  Here, we use a lambda function within attachCallback to handle incoming data.\n  `value` represents the const char value sent from your dashboard which is equal to selected value.\n*/\ncard1.attachCallback([&](const char* value){\n  Serial.println("[Card1] Dropdown Callback Triggered: "+String(value));\n  card1.update(value);\n  dashboard.sendUpdates();\n});\n')),(0,t.yg)("h3",{id:"updater"},"Updater"),(0,t.yg)("p",null,"This will change the selected value of our dropdown:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(const char* value);\n")),(0,t.yg)("p",null,"Or you can also update the choices along with the value like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"// This will change the selected value and update the choices as well\ncard1.update(const char* value, const char* choices);\n")),(0,t.yg)("h3",{id:"reference"},"Reference"),(0,t.yg)("p",null,"This is a reference sketch showing positions for intializer, callback and updater."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'\n...\n\n/* Dropdown card initializer */\nCard dropdown(&dashboard, DROPDOWN_CARD, "Test Dropdown", "Option1,Option2,Option3,Option4");\n\n\nvoid setup() {\n  ...\n\n  /* Dropdown card callback */\n  dropdown.attachCallback([&](const char* value){\n    Serial.println("Dropdown Callback Triggered: "+String(value));\n    /* Dropdown card updater - you need to update the button with latest value upon firing of callback */\n    dropdown.update(value);\n    /* Send update to dashboard */\n    dashboard.sendUpdates();\n  });\n}\n\nvoid loop() {\n  ...\n}\n\n')))}u.isMDXComponent=!0}}]);