"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[8891],{5680:(e,a,r)=>{r.d(a,{xA:()=>d,yg:()=>y});var t=r(6540);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=t.createContext({}),s=function(e){var a=t.useContext(c),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},d=function(e){var a=s(e.components);return t.createElement(c.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(r),g=n,y=p["".concat(c,".").concat(g)]||p[g]||u[g]||l;return r?t.createElement(y,i(i({ref:a},d),{},{components:r})):t.createElement(y,i({ref:a},d))}));function y(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=g;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o[p]="string"==typeof e?e:n,i[1]=o;for(var s=2;s<l;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},2260:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var t=r(8168),n=(r(6540),r(5680));const l={title:"Week Selector Card",sidebar_label:"Week Selector (Pro)",sidebar_position:15},i=void 0,o={unversionedId:"widgets/cards/week-selector",id:"version-v4.x.x/widgets/cards/week-selector",title:"Week Selector Card",description:"This is an exclusive feature of DASH Pro. Check it out here.",source:"@site/versioned_docs/version-v4.x.x/widgets/cards/week-selector.md",sourceDirName:"widgets/cards",slug:"/widgets/cards/week-selector",permalink:"/widgets/cards/week-selector",draft:!1,tags:[],version:"v4.x.x",sidebarPosition:15,frontMatter:{title:"Week Selector Card",sidebar_label:"Week Selector (Pro)",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Push Button (Pro)",permalink:"/widgets/cards/push-button"},next:{title:"Color Picker (Pro)",permalink:"/widgets/cards/color-picker"}},c={},s=[{value:"Initializer",id:"initializer",level:3},{value:"Callback",id:"callback",level:3},{value:"Updater",id:"updater",level:3},{value:"Reference",id:"reference",level:3}],d={toc:s},p="wrapper";function u(e){let{components:a,...r}=e;return(0,n.yg)(p,(0,t.A)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("admonition",{title:"Pro Feature",type:"danger"},(0,n.yg)("p",{parentName:"admonition"},"This is an exclusive feature of DASH Pro. Check it out ",(0,n.yg)("a",{parentName:"p",href:"https://espdash.pro"},"here"),".")),(0,n.yg)("img",{className:"card-preview",src:"/img/v4/week-selector.png",width:"280px",alt:"Week Selector Card Preview"}),(0,n.yg)("br",null),(0,n.yg)("br",null),(0,n.yg)("p",null,"Week selector card gives you a nice card in which days are selectable by users. This type of card is very useful in many scenarios. The output of the card is comma ",(0,n.yg)("inlineCode",{parentName:"p"},",")," separated string on days which were selected by the user."),(0,n.yg)("h3",{id:"initializer"},"Initializer"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Week Selector Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name)\n*/\nCard card1(&dashboard, WEEK_SELECTOR_CARD, "Select Days");\n')),(0,n.yg)("h3",{id:"callback"},"Callback"),(0,n.yg)("p",null,"Week selector card requires a callback function which will be called when we receive a input from our dashboard. In our setup block, we will be calling our ",(0,n.yg)("inlineCode",{parentName:"p"},"attachCallback")," function and provide a lambda (callback) function with a ",(0,n.yg)("inlineCode",{parentName:"p"},"const char*")," (character array) argument. Whenever a user selects a day, this callback will be triggered with a comma ",(0,n.yg)("inlineCode",{parentName:"p"},",")," separated list of days which indicate what was selected by user."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Note:")," You need to call the ",(0,n.yg)("inlineCode",{parentName:"p"},"update")," function and ",(0,n.yg)("inlineCode",{parentName:"p"},"sendUpdates")," immediately once you receive the value in callback. Otherwise user input will not be registered on dashboard and it will keep the card stuck in 'waiting' phase."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  We provide our attachCallback with a lambda function to handle incomming data\n  Example Value: mon,tue,wed,thu,fri,sat,sun\n*/\ncard1.attachCallback([&](const char* days){\n  Serial.println("[Card1] Week Selector Triggered: "+String(days));\n  card1.update(value);\n  dashboard.sendUpdates();\n});\n')),(0,n.yg)("h3",{id:"updater"},"Updater"),(0,n.yg)("p",null,"You can also select or deselect values depending on your logic. You just need to supply the updater with a comma ",(0,n.yg)("inlineCode",{parentName:"p"},",")," separated list of days. Order of days in this string doesn't matter. Example: Supplying ",(0,n.yg)("inlineCode",{parentName:"p"},"tue,mon,thu")," will show ",(0,n.yg)("inlineCode",{parentName:"p"},"Monday, Tuesday & Thursday")," as selected on Week Selector Card."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(const char* value);\n")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(String value);\n")),(0,n.yg)("h3",{id:"reference"},"Reference"),(0,n.yg)("p",null,"This is a reference sketch showing positions for intializer, callback and updater."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-cpp"},'\n...\n\n/* Week selector card initializer */\nCard week(&dashboard, WEEK_SELECTOR_CARD, "Select Days");\n\n\nvoid setup() {\n  ...\n\n  /* Week selector card callback */\n  week.attachCallback([&](const char* days){\n    Serial.println("Week Selector Callback Triggered: "+String(value));\n    /* Week selector card updater - you need to update week selector with latest value upon firing of callback */\n    week.update(value);\n    /* Send update to dashboard */\n    dashboard.sendUpdates();\n  });\n}\n\nvoid loop() {\n  ...\n}\n\n')))}u.isMDXComponent=!0}}]);