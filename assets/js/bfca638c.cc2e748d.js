"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[2800],{5788:(e,r,a)=>{a.d(r,{Iu:()=>s,yg:()=>y});var n=a(1504);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function o(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var d=n.createContext({}),c=function(e){var r=n.useContext(d),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},s=function(e){var r=c(e.components);return n.createElement(d.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,i=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=c(a),g=t,y=p["".concat(d,".").concat(g)]||p[g]||u[g]||i;return a?n.createElement(y,l(l({ref:r},s),{},{components:a})):n.createElement(y,l({ref:r},s))}));function y(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=a.length,l=new Array(i);l[0]=g;var o={};for(var d in r)hasOwnProperty.call(r,d)&&(o[d]=r[d]);o.originalType=e,o[p]="string"==typeof e?e:t,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},8676:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(5072),t=(a(1504),a(5788));const i={title:"Slider Card",sidebar_label:"Slider",sidebar_position:7},l=void 0,o={unversionedId:"cards/slider",id:"version-v4.x.x/cards/slider",title:"Slider Card",description:"This card adds a interactive horizontal slider to your dashboard. Slider card is useful when you require a integer input within a certain range. ( Example use case: LED brightness control )",source:"@site/versioned_docs/version-v4.x.x/cards/slider.md",sourceDirName:"cards",slug:"/cards/slider",permalink:"/cards/slider",draft:!1,tags:[],version:"v4.x.x",sidebarPosition:7,frontMatter:{title:"Slider Card",sidebar_label:"Slider",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Toggle Button",permalink:"/cards/button"},next:{title:"Air (Pro)",permalink:"/cards/air"}},d={},c=[{value:"Initializer",id:"initializer",level:3},{value:"Callback",id:"callback",level:3},{value:"Updater",id:"updater",level:3},{value:"Reference",id:"reference",level:3}],s={toc:c},p="wrapper";function u(e){let{components:r,...a}=e;return(0,t.yg)(p,(0,n.c)({},s,a,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("img",{className:"card-preview",src:"/img/v4/slider-card.png",width:"380px",alt:"Preview"}),(0,t.yg)("br",null),(0,t.yg)("br",null),(0,t.yg)("p",null,"This card adds a interactive horizontal slider to your dashboard. Slider card is useful when you require a integer input within a certain range. ( Example use case: LED brightness control )"),(0,t.yg)("h3",{id:"initializer"},"Initializer"),(0,t.yg)("p",null,"With slider card, Initializer requires ",(0,t.yg)("inlineCode",{parentName:"p"},"min")," & ",(0,t.yg)("inlineCode",{parentName:"p"},"max")," range. Additionally you can also supply ",(0,t.yg)("inlineCode",{parentName:"p"},"step")," as a seventh argument to set the step size of the slider."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Slider Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name, const char* symbol (optional), int min, int max)\n*/\nCard card1(&dashboard, SLIDER_CARD, "Test Slider", "", 0, 255, 1);\n')),(0,t.yg)("h3",{id:"callback"},"Callback"),(0,t.yg)("p",null,"Slider Card requires a callback function which will be called when we receive a input from our dashboard. We will be calling our ",(0,t.yg)("inlineCode",{parentName:"p"},"attachCallback")," function and provide a lambda function with a ",(0,t.yg)("inlineCode",{parentName:"p"},"int")," argument."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Note:")," You need to call the ",(0,t.yg)("inlineCode",{parentName:"p"},"update")," function and ",(0,t.yg)("inlineCode",{parentName:"p"},"sendUpdates")," immediately once you receive the value in callback. Otherwise user input will not be registered on dashboard."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  We provide our attachCallback with a lambda function to handle incomming data\n  `value` is the boolean sent from your dashboard\n*/\ncard1.attachCallback([&](float value){\n  Serial.println("[Card1] Slider Callback Triggered: "+String(value));\n  card1.update(value);\n  dashboard.sendUpdates();\n});\n')),(0,t.yg)("h3",{id:"updater"},"Updater"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(int value);\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(float value);\n")),(0,t.yg)("p",null,"Or, update symbol along your value:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'card1.update(244, "%");\n')),(0,t.yg)("h3",{id:"reference"},"Reference"),(0,t.yg)("p",null,"This is a reference sketch showing positions for intializer, callback and updater."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'\n...\n\n/* Slider card initializer */\nCard slider(&dashboard, SLIDER_CARD, "Test Slider", "", 0, 255, 1);\n\n\nvoid setup() {\n  ...\n\n  /* Slider card callback */\n  slider.attachCallback([&](float value){\n    Serial.println("Slider Callback Triggered: "+String(value));\n    /* Slider card updater - you need to update the slider with latest value upon firing of callback */\n    slider.update(value);\n    /* Send update to dashboard */\n    dashboard.sendUpdates();\n  });\n}\n\nvoid loop() {\n  ...\n}\n\n')))}u.isMDXComponent=!0}}]);