"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[1496],{5788:(e,a,t)=>{t.d(a,{Iu:()=>p,yg:()=>g});var n=t(1504);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=n.createContext({}),s=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=s(e.components);return n.createElement(c.Provider,{value:a},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(t),u=r,g=d["".concat(c,".").concat(u)]||d[u]||y[u]||i;return t?n.createElement(g,l(l({ref:a},p),{},{components:t})):n.createElement(g,l({ref:a},p))}));function g(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5876:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=t(5072),r=(t(1504),t(5788));const i={title:"Joystick Card",sidebar_label:"Joystick (Pro)",sidebar_position:16},l=void 0,o={unversionedId:"cards/joystick",id:"cards/joystick",title:"Joystick Card",description:"This is an exclusive feature of DASH Pro. Check it out here.",source:"@site/docs/cards/joystick.md",sourceDirName:"cards",slug:"/cards/joystick",permalink:"/next/cards/joystick",draft:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{title:"Joystick Card",sidebar_label:"Joystick (Pro)",sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Week Selector (Pro)",permalink:"/next/cards/week-selector"},next:{title:"Bar",permalink:"/next/charts/bar"}},c={},s=[{value:"Preview:",id:"preview",level:4},{value:"Type:",id:"type",level:4},{value:"Initializer:",id:"initializer",level:4},{value:"Direction Lock:",id:"direction-lock",level:4},{value:"Callback:",id:"callback",level:4},{value:"Directional Callback:",id:"directional-callback",level:5},{value:"Coordinates Callback:",id:"coordinates-callback",level:5}],p={toc:s},d="wrapper";function y(e){let{components:a,...t}=e;return(0,r.yg)(d,(0,n.c)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("admonition",{title:"Pro Feature",type:"danger"},(0,r.yg)("p",{parentName:"admonition"},"This is an exclusive feature of DASH Pro. Check it out ",(0,r.yg)("a",{parentName:"p",href:"https://espdash.pro"},"here"),".")),(0,r.yg)("h4",{id:"preview"},"Preview:"),(0,r.yg)("img",{className:"card-preview",src:"/img/v4/joystick-card.png",width:"280px",alt:"Preview"}),(0,r.yg)("br",null),(0,r.yg)("br",null),(0,r.yg)("p",null,"This card adds a joystick to your dashboard to control some stuff and provides you with easy to interpret directional data via callback. You can even lock direction of the joystick to X or Y axis."),(0,r.yg)("br",null),(0,r.yg)("h4",{id:"type"},"Type:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"JOYSTICK_CARD")),(0,r.yg)("br",null),(0,r.yg)("h4",{id:"initializer"},"Initializer:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Joystick Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name, const char* directionLock (optional) )\n*/\nCard joystick(&dashboard, JOYSTICK_CARD, "Joystick 1");\n')),(0,r.yg)("br",null),(0,r.yg)("h4",{id:"direction-lock"},"Direction Lock:"),(0,r.yg)("p",null,"You can lock joystick to X or Y Axis:"),(0,r.yg)("p",null,"Supply it with ",(0,r.yg)("inlineCode",{parentName:"p"},"lockX")," as 4th argument and it will lock to X axis."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'Card joystick(&dashboard, JOYSTICK_CARD, "Joystick 1", "lockX");\n')),(0,r.yg)("br",null),(0,r.yg)("p",null,"Supply it with ",(0,r.yg)("inlineCode",{parentName:"p"},"lockY")," as 4th argument and it will lock to Y axis."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'Card joystick(&dashboard, JOYSTICK_CARD, "Joystick 1", "lockY");\n')),(0,r.yg)("p",null,"By default, joystick works on both axis."),(0,r.yg)("h4",{id:"callback"},"Callback:"),(0,r.yg)("p",null,"Joystick Card requires a callback function which will be called when we receive a input from our dashboard. In setup block, we will be calling our ",(0,r.yg)("inlineCode",{parentName:"p"},"attachCallback")," function and provide a lambda (callback) function with a ",(0,r.yg)("inlineCode",{parentName:"p"},"const char*")," (character array) argument."),(0,r.yg)("p",null,"Joystick card has 2 callbacks, ",(0,r.yg)("inlineCode",{parentName:"p"},"directional")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"coordinates"),":"),(0,r.yg)("h5",{id:"directional-callback"},"Directional Callback:"),(0,r.yg)("p",null,"This callback will return the active direction of your joystick when it's moved. It will be one of the following:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"up")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"down")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"left")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"right")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"idle"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"/*\n  We provide our attachCallback with a lambda function to handle incomming data\n  `value` is the direction of joystick 'up', 'down', 'left', 'right' or 'idle'\n*/\njoystick.attachCallback([&](const char* direction){\n  Serial.println(\"[Joystick] Current Direction: \"+String(direction));\n});\n")),(0,r.yg)("h5",{id:"coordinates-callback"},"Coordinates Callback:"),(0,r.yg)("p",null,"This callback will return the active coordinates of the thumb of your joystick when it's moved. It will provide x and y coordinates which ranges from ",(0,r.yg)("inlineCode",{parentName:"p"},"-60")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"60")," on each axis."),(0,r.yg)("p",null,"In case of X axis: ",(0,r.yg)("inlineCode",{parentName:"p"},"-60")," is left, ",(0,r.yg)("inlineCode",{parentName:"p"},"60")," is right.\nFor Y axis: ",(0,r.yg)("inlineCode",{parentName:"p"},"-60")," is up, and ",(0,r.yg)("inlineCode",{parentName:"p"},"60")," is bottom."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  We provide our attachCallback with a lambda function to handle incomming data.\n  In this case, we will be getting x and y axis coordinates in range of -60 to 60\n*/\njoystick.attachCallback([&](int8_t x, int8_t y){\n  Serial.printf("[Joystick] X Axis: %d, Y Axis: %d\\n", x, y);\n});\n')),(0,r.yg)("br",null),(0,r.yg)("br",null))}y.isMDXComponent=!0}}]);