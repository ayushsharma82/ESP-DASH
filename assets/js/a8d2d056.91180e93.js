"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[5348],{5788:(e,r,a)=>{a.d(r,{Iu:()=>d,yg:()=>g});var n=a(1504);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=n.createContext({}),c=function(e){var r=n.useContext(l),a=r;return e&&(a="function"==typeof e?e(r):o(o({},r),e)),a},d=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(a),y=t,g=p["".concat(l,".").concat(y)]||p[y]||u[y]||i;return a?n.createElement(g,o(o({ref:r},d),{},{components:a})):n.createElement(g,o({ref:r},d))}));function g(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=a.length,o=new Array(i);o[0]=y;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[p]="string"==typeof e?e:t,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},668:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(5072),t=(a(1504),a(5788));const i={title:"Password Card",sidebar_label:"Password (Pro)",sidebar_position:12},o=void 0,s={unversionedId:"cards/password",id:"cards/password",title:"Password Card",description:"This is an exclusive feature of DASH Pro. Check it out here.",source:"@site/docs/cards/password.md",sourceDirName:"cards",slug:"/cards/password",permalink:"/next/cards/password",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"Password Card",sidebar_label:"Password (Pro)",sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Text Input (Pro)",permalink:"/next/cards/text-input"},next:{title:"Dropdown (Pro)",permalink:"/next/cards/dropdown"}},l={},c=[{value:"Initializer",id:"initializer",level:3},{value:"Callback",id:"callback",level:3},{value:"Updater",id:"updater",level:3},{value:"Reference",id:"reference",level:3}],d={toc:c},p="wrapper";function u(e){let{components:r,...a}=e;return(0,t.yg)(p,(0,n.c)({},d,a,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("admonition",{title:"Pro Feature",type:"danger"},(0,t.yg)("p",{parentName:"admonition"},"This is an exclusive feature of DASH Pro. Check it out ",(0,t.yg)("a",{parentName:"p",href:"https://espdash.pro"},"here"),".")),(0,t.yg)("img",{className:"card-preview",src:"/img/v4/text-input-card.png",width:"280px",alt:"Text Input Card Preview"}),(0,t.yg)("br",null),(0,t.yg)("br",null),(0,t.yg)("p",null,"Just like ",(0,t.yg)("inlineCode",{parentName:"p"},"Text Input")," card, Password card gives you the ability to take String input from user in a ",(0,t.yg)("em",{parentName:"p"},"inconspicuous")," way and save them in your application. "),(0,t.yg)("p",null,"This card is very useful for saving any kind of secret or password that requires the input value to be ",(0,t.yg)("strong",{parentName:"p"},"not")," visible on dashboard in plain text."),(0,t.yg)("h3",{id:"initializer"},"Initializer"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Password Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name)\n*/\nCard card1(&dashboard, PASSWORD_CARD, "Test Pass");\n')),(0,t.yg)("h3",{id:"callback"},"Callback"),(0,t.yg)("p",null,"Password card requires a callback function which will be called when we receive a input from our dashboard. In setup block, we will be calling our ",(0,t.yg)("inlineCode",{parentName:"p"},"attachCallback")," function and provide a lambda (callback) function with a ",(0,t.yg)("inlineCode",{parentName:"p"},"const char*")," (character array) argument."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  We provide our attachCallback with a lambda function to handle incomming data\n*/\ncard1.attachCallback([&](const char* value){\n  Serial.println("[Card1] Password Card Callback: "+String(value));\n});\n')),(0,t.yg)("h3",{id:"updater"},"Updater"),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},(0,t.yg)("em",{parentName:"p"},"Password card doesn't require any updater as value is not passed back to dashboard."))),(0,t.yg)("h3",{id:"reference"},"Reference"),(0,t.yg)("p",null,"This is a reference sketch showing positions for intializer and callback."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'\n...\n\n/* Password card initializer */\nCard pass(&dashboard, PASSWORD_CARD, "Test Pass");\n\n\nvoid setup() {\n  ...\n\n  /* Password card callback */\n  pass.attachCallback([&](const char* value){\n    Serial.println("Password Callback Triggered: "+String(value));\n  });\n}\n\nvoid loop() {\n  ...\n}\n\n')))}u.isMDXComponent=!0}}]);