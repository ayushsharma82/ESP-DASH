"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[3575],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>g});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return t?n.createElement(g,i(i({ref:r},c),{},{components:t})):n.createElement(g,i({ref:r},c))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var p in r)hasOwnProperty.call(r,p)&&(o[p]=r[p]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1512:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=t(7462),a=(t(7294),t(3905));const l={title:"Progress Card",sidebar_label:"Progress",sidebar_position:4},i=void 0,o={unversionedId:"cards/progress",id:"cards/progress",title:"Progress Card",description:"Preview:",source:"@site/docs/cards/progress.md",sourceDirName:"cards",slug:"/cards/progress",permalink:"/next/cards/progress",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Progress Card",sidebar_label:"Progress",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Energy (Pro)",permalink:"/next/cards/energy"},next:{title:"Toggle Button",permalink:"/next/cards/button"}},p={},s=[{value:"Preview:",id:"preview",level:4},{value:"Type:",id:"type",level:4},{value:"Valid Data Types:",id:"valid-data-types",level:4},{value:"Initializer:",id:"initializer",level:4},{value:"Updaters:",id:"updaters",level:4}],c={toc:s},d="wrapper";function u(e){let{components:r,...t}=e;return(0,a.kt)(d,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"preview"},"Preview:"),(0,a.kt)("img",{className:"card-preview",src:"/img/v4/progress-card.png",width:"280px",alt:"Preview"}),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("p",null,"This card displays a horizontal range based on a ",(0,a.kt)("inlineCode",{parentName:"p"},"integer")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"float")," value. It makes data visualization user friendly."),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"type"},"Type:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"PROGRESS_CARD")),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"valid-data-types"},"Valid Data Types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"float"))),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"initializer"},"Initializer:"),(0,a.kt)("p",null,"With progress card, Initializer requires ",(0,a.kt)("inlineCode",{parentName:"p"},"min")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"max")," range."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Progress Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name, const char* symbol (optional), int min, int max)\n*/\nCard card1(&dashboard, PROGRESS_CARD, "Progress1", "", 0, 255);\n')),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"updaters"},"Updaters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"card1.update(int value);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"card1.update(float value);\n")),(0,a.kt)("p",null,"Or, update symbol along your value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'card1.update(244, "%");\n')))}u.isMDXComponent=!0}}]);