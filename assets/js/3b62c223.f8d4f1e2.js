"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[5770],{5680:(e,r,a)=>{a.d(r,{xA:()=>c,yg:()=>y});var n=a(6540);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=n.createContext({}),p=function(e){var r=n.useContext(s),a=r;return e&&(a="function"==typeof e?e(r):o(o({},r),e)),a},c=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),g=t,y=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return a?n.createElement(y,o(o({ref:r},c),{},{components:a})):n.createElement(y,o({ref:r},c))}));function y(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=a.length,o=new Array(i);o[0]=g;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[d]="string"==typeof e?e:t,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},3561:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(8168),t=(a(6540),a(5680));const i={title:"Progress Bar Card",sidebar_label:"Progress Bar",sidebar_position:4},o=void 0,l={unversionedId:"cards/progress",id:"version-v4.x.x/cards/progress",title:"Progress Bar Card",description:"Preview:",source:"@site/versioned_docs/version-v4.x.x/cards/progress.md",sourceDirName:"cards",slug:"/cards/progress",permalink:"/cards/progress",draft:!1,tags:[],version:"v4.x.x",sidebarPosition:4,frontMatter:{title:"Progress Bar Card",sidebar_label:"Progress Bar",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Humidity",permalink:"/cards/humidity"},next:{title:"Status",permalink:"/cards/status"}},s={},p=[{value:"Preview:",id:"preview",level:4},{value:"Initializer",id:"initializer",level:3},{value:"Callback",id:"callback",level:3},{value:"Updater",id:"updater",level:3},{value:"Reference",id:"reference",level:3}],c={toc:p},d="wrapper";function u(e){let{components:r,...a}=e;return(0,t.yg)(d,(0,n.A)({},c,a,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h4",{id:"preview"},"Preview:"),(0,t.yg)("img",{className:"card-preview",src:"/img/v4/progress-card.png",width:"280px",alt:"Preview"}),(0,t.yg)("br",null),(0,t.yg)("br",null),(0,t.yg)("p",null,"This card displays a horizontal progress bar based on a ",(0,t.yg)("inlineCode",{parentName:"p"},"integer")," or a ",(0,t.yg)("inlineCode",{parentName:"p"},"float")," value."),(0,t.yg)("h3",{id:"initializer"},"Initializer"),(0,t.yg)("p",null,"Initializer requires ",(0,t.yg)("inlineCode",{parentName:"p"},"min"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"max")," of range you want to display."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Progress Card\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name, const char* symbol (optional), int min, int max)\n*/\nCard card1(&dashboard, PROGRESS_CARD, "Progress1", "", 0, 255);\n')),(0,t.yg)("h3",{id:"callback"},"Callback"),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},(0,t.yg)("em",{parentName:"p"},"Progress bar card doesn't require any callback."))),(0,t.yg)("h3",{id:"updater"},"Updater"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(int value);\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"card1.update(float value);\n")),(0,t.yg)("p",null,"Or, update symbol along your value:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'card1.update(244, "%");\n')),(0,t.yg)("h3",{id:"reference"},"Reference"),(0,t.yg)("p",null,"This is a reference sketch showing positions for intializer and updater."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'\n...\n\n/* Progress card initializer */\nCard progress(&dashboard, PROGRESS_CARD, "Progress1", "", 0, 255);\n\n\nvoid setup() {\n  ...\n\n  /* Progress card updater - can be used anywhere (apart from global scope) */\n  progress.update(100);\n}\n\nvoid loop() {\n  ...\n}\n\n')))}u.isMDXComponent=!0}}]);