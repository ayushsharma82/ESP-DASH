"use strict";(self.webpackChunkesp_dash_docs=self.webpackChunkesp_dash_docs||[]).push([[2748],{5680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>g});var a=r(6540);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=a.createContext({}),p=function(e){var n=a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),y=t,g=u["".concat(s,".").concat(y)]||u[y]||d[y]||i;return r?a.createElement(g,o(o({ref:n},c),{},{components:r})):a.createElement(g,o({ref:n},c))}));function g(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,o=new Array(i);o[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:t,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}y.displayName="MDXCreateElement"},9596:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=r(8168),t=(r(6540),r(5680));const i={title:"Line Chart",sidebar_label:"Line (Pro)",sidebar_position:2},o=void 0,l={unversionedId:"widgets/charts/line",id:"widgets/charts/line",title:"Line Chart",description:"This is an exclusive feature of DASH Pro. Check it out here.",source:"@site/docs/widgets/charts/line.md",sourceDirName:"widgets/charts",slug:"/widgets/charts/line",permalink:"/next/widgets/charts/line",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Line Chart",sidebar_label:"Line (Pro)",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Bar",permalink:"/next/widgets/charts/bar"},next:{title:"Area (Pro)",permalink:"/next/widgets/charts/area"}},s={},p=[{value:"Initializer",id:"initializer",level:3},{value:"Updater",id:"updater",level:3},{value:"For X-Axis",id:"for-x-axis",level:4},{value:"X-Axis Data Types",id:"x-axis-data-types",level:4},{value:"For Y-Axis",id:"for-y-axis",level:4},{value:"Y-Axis Data Types",id:"y-axis-data-types",level:4},{value:"Reference",id:"reference",level:3}],c={toc:p},u="wrapper";function d(e){let{components:n,...r}=e;return(0,t.yg)(u,(0,a.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("admonition",{title:"Pro Feature",type:"danger"},(0,t.yg)("p",{parentName:"admonition"},"This is an exclusive feature of DASH Pro. Check it out ",(0,t.yg)("a",{parentName:"p",href:"https://espdash.pro"},"here"),".")),(0,t.yg)("img",{className:"card-preview",src:"/img/v4/line-chart.png",width:"500px",alt:"Preview"}),(0,t.yg)("br",null),(0,t.yg)("br",null),(0,t.yg)("h3",{id:"initializer"},"Initializer"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/* \n  Line Chart\n  Valid Arguments: (ESPDash dashboard, Card Type, const char* name )\n*/\nChart chart1(&dashboard, LINE_CHART, "Chart Name");\n')),(0,t.yg)("h3",{id:"updater"},"Updater"),(0,t.yg)("p",null,"Use the following functions to update the chart:"),(0,t.yg)("h4",{id:"for-x-axis"},"For X-Axis"),(0,t.yg)("p",null,"X-Axis updater uses ",(0,t.yg)("inlineCode",{parentName:"p"},"updateX")," function."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n  Data for X Axis of our Chart\n  This array can be of: `int` / `float` or `String`\n    \n  Note: this array should be kept in global scope. i.e. it should never be deleted from memory.\n*/\nString XAxis[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};\n\n/*\n  Update Function for Chart is as follows:\n  --------\n  (int array[], size_t array_size)\n  or\n  (float array[], size_t array_size)\n  or\n  (String array[], size_t array_size)\n  or\n  (const char* array[], size_t array_size)\n*/\nchart1.updateX(XAxis, 7);\n')),(0,t.yg)("h4",{id:"x-axis-data-types"},"X-Axis Data Types"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"int")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"float")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"String")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"const char*"))),(0,t.yg)("hr",null),(0,t.yg)("h4",{id:"for-y-axis"},"For Y-Axis"),(0,t.yg)("p",null,"Y-Axis updater uses ",(0,t.yg)("inlineCode",{parentName:"p"},"updateY")," function."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"/*\n  Data for Y Axis of our Chart\n  This array can be of: `int` or `float`\n    \n  Note: this array should be kept in global scope. i.e. it should never be deleted from memory.\n*/\nint YAxis[] = {0, 0, 0, 0, 0, 0, 0};\n\n/*\n  Update Function for Chart is as follows:\n  --------\n  (int array[], size_t array_size)\n  or \n  (float array[], size_t array_size)\n*/\nchart1.updateY(YAxis, 7);\n")),(0,t.yg)("h4",{id:"y-axis-data-types"},"Y-Axis Data Types"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"int")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"float"))),(0,t.yg)("h3",{id:"reference"},"Reference"),(0,t.yg)("p",null,"This is a reference sketch showing positions for intializer and updater."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},'\n...\n\n/* Line Chart initializer */\nChart line(&dashboard, LINE_CHART, "Chart Name");\n\n/* XAxis & YAxis data in global scope */\nint YAxis[] = {0, 0, 0, 0, 0, 0, 0};\nString XAxis[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};\n\nvoid setup() {\n  ...\n\n  /* Line chart x-axis updater - can be used anywhere (apart from global scope) */\n  line.updateX(XAxis, 7); // Ideally only once in setup block\n\n  /* Line chart y-axis updater - can be used anywhere (apart from global scope) */\n  line.updateY(YAxis, 7);\n}\n\nvoid loop() {\n  ...\n}\n\n')))}d.isMDXComponent=!0}}]);